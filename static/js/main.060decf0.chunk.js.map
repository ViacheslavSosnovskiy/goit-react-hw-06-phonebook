{"version":3,"sources":["components/ContactList/contact.module.css","components/App.module.css","components/Filter/filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducers.js","redux/store.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/App.js","index.js","components/ContactForm/contactForm.module.css"],"names":["module","exports","contactsActions","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","items","createReducer","actions","state","filter","contact","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","getItems","getFilter","getVisibleContacts","normalizedFilter","toLowerCase","includes","initialState","ContactForm","useState","setState","useSelector","dispatch","useDispatch","handleChange","e","currentTarget","value","prevState","resetForm","onSubmit","preventDefault","some","toast","error","className","s","label","maxLength","input","type","onChange","pattern","title","required","button","Filter","target","ContactList","map","item","onClick","App","container","wrapper","autoClose","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.060decf0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"contact_contact__3b7-p\",\"item\":\"contact_item__nmnNe\",\"button\":\"contact_button__1jwEC\",\"name\":\"contact_name__1KYxe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__CREau\",\"wrapper\":\"App_wrapper__1fEUK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"filter_input__jQvyH\"};","import { v4 as uuidv4 } from \"uuid\";\r\nimport { createAction } from '@reduxjs/toolkit'\r\n\r\n \r\nconst addContact = createAction('contact/add', ({name, number}) => ({\r\n     payload: {\r\n        id: uuidv4(),\r\n        name,\r\n        number,\r\n      },\r\n }))\r\n\r\n\r\nconst deleteContact = createAction('contact/delete')\r\n\r\nconst changeFilter = createAction('contact/changeFilter')\r\n\r\nconst contactsActions = {addContact, deleteContact, changeFilter}\r\n\r\nexport default contactsActions\r\n\r\n\r\n // const deleteContact = id => ({\r\n//      type: types.DELETE,\r\n//      payload: id,\r\n//  })\r\n\r\n // const changeFilter = value => ({\r\n//      type: types.CHANGE_FILTER,\r\n//      payload: value,\r\n//  })","import { combineReducers } from \"redux\"\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions'\r\n\r\nconst items = createReducer([], {\r\n    [actions.addContact]: (state, {payload}) => [...state, payload],\r\n    [actions.deleteContact]: (state, {payload}) => state.filter(contact => contact.id !== payload)\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (_, {payload}) => payload\r\n})\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n})\r\n\r\n// const items = (state = [], {type, payload}) => {\r\n//     switch(type) {\r\n//         case types.ADD:\r\n//             return [...state, payload]\r\n\r\n//         case types.DELETE:\r\n//             return state.filter(contact => contact.id !== payload)\r\n\r\n//         default:\r\n//         return state\r\n//     }\r\n// }\r\n\r\n// const filter = (state = '', {type, payload}) => {\r\n//     switch(type) {\r\n//         case actions.changeFilter:\r\n//             return payload\r\n        \r\n//         default:\r\n//             return state\r\n//     }\r\n// }","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contacts-reducers'\r\nimport logger from 'redux-logger'\r\nimport { \r\n  persistStore, \r\n  persistReducer, \r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER, } \r\n  from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contact',\r\n  storage,\r\n  blacklist: ['filter']\r\n}\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n  serializableCheck: {\r\n    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n  },\r\n}), logger]\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer)\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development'\r\n})\r\n\r\nexport const persistor = persistStore(store)\r\n\r\n\r\n\r\n\r\n// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());","export const getItems = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter\r\n\r\nexport const getVisibleContacts = (state) => {\r\n    const items = getItems(state);\r\n    const filter = getFilter(state)\r\n    const normalizedFilter = filter.toLowerCase();\r\n  \r\n    return items.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  };","import {useState} from \"react\";\r\nimport s from \"./contactForm.module.css\";\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {getItems} from '../../redux/contacts/contacts-selectors'\r\nimport contactsActions from '../../redux/contacts/contacts-actions'\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\nconst initialState = {\r\n    name: \"\",\r\n    number: \"\",\r\n}\r\n\r\nexport default function ContactForm() {\r\nconst [state, setState] = useState(initialState)\r\nconst contacts = useSelector(getItems)\r\nconst dispatch = useDispatch()\r\n\r\n const handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    setState((prevState) => ({...prevState, [name]: value}))\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if(contacts.some((contact) => contact.name === state.name)) {\r\n      toast.error(\"This contact is already exist ! Try one more time, please!\");\r\n      return;\r\n    }\r\n  \r\n    // this.props.onSubmit(this.state);\r\n    dispatch(contactsActions.addContact(state))\r\n    resetForm();\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setState(initialState);\r\n  };\r\n\r\n    return (\r\n      <>\r\n        <form onSubmit={handleSubmit}>\r\n          <label className={s.label}>\r\n            Name\r\n            <input\r\n              maxLength=\"22\"\r\n              className={s.input}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={state.name}\r\n              onChange={handleChange}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <label className={s.label}>\r\n            Number\r\n            <input\r\n              className={s.input}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={state.number}\r\n              onChange={handleChange}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <button type=\"submit\" className={s.button}>\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onSubmit: (text) => dispatch(contactsActions.addContact(text)),\r\n// });\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactForm);\r\n","import s from \"./filter.module.css\";\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {getFilter} from '../../redux/contacts/contacts-selectors'\r\nimport contactsActions from '../../redux/contacts/contacts-actions'\r\n\r\nexport default function Filter() {\r\nconst value = useSelector(getFilter)\r\nconst dispatch = useDispatch()\r\n\r\n  return (\r\n    <label>\r\n      Find contacts by name\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   value: state.contacts.filter,\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: (e) => dispatch(contactsActions.changeFilter(e.target.value))\r\n// })\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter)\r\n","import s from \"./contact.module.css\";\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport contactsActions from '../../redux/contacts/contacts-actions'\r\nimport { getVisibleContacts } from \"../../redux/contacts/contacts-selectors\";\r\n\r\nexport default function ContactList() {\r\n  const contacts = useSelector(getVisibleContacts)\r\n  const dispatch = useDispatch()\r\n\r\n\r\n  return (\r\n    <ul className={s.contact}>\r\n      {contacts.map((contact) => (\r\n        <li key={contact.id} {...contact} className={s.item}>\r\n           <p className={s.name}>{contact.name}</p>\r\n           <p>{contact.number}</p>\r\n           <button className={s.button} onClick={() => dispatch(contactsActions.deleteContact(contact.id))}>\r\n        Delete\r\n      </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\n// const mapStateToProps = state => ({\r\n//   const {filter, items} = state.contacts;\r\n//   const visibleContacts = getVisibleContacts(items, filter)\r\n//   return {constacts: visibleContacts}\r\n// })\r\n\r\n// const mapStateToProps = ({contacts: {items, filter}}) => ({\r\n//   // contacts: getVisibleContacts(state.contacts.items, state.contacts.filter)\r\n//   contacts: getVisibleContacts(items, filter)\r\n// }) \r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDeleteContact: id => dispatch(contactsActions.deleteContact(id))\r\n// })\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import ContactForm from \"./ContactForm\";\r\nimport Filter from \"./Filter\";\r\nimport ContactList from \"./ContactList\";\r\nimport s from \"./App.module.css\";\r\nimport { ToastContainer} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n\r\nexport default function App() {\r\n\r\n  return (\r\n    <div className={s.container}>\r\n      <h1>Phonebook</h1>\r\n      <h3>Add contacts</h3>\r\n      <ContactForm />\r\n\r\n      <h3>Contacts</h3>\r\n      <Filter />\r\n      <div className={s.wrapper}>\r\n        <ContactList />\r\n      </div>\r\n      <ToastContainer autoClose={4000} />\r\n    </div>\r\n  );\r\n}\r\n\r\n// const addContact = ({ name, number }) => {\r\n  //   const person = [\r\n  //     {\r\n  //       id: uuidv4(),\r\n  //       name,\r\n  //       number,\r\n  //     },\r\n  //   ];\r\n\r\n  //   if (contacts.some((contact) => contact.name === person.name)) {\r\n  //     toast.error(\"This contact is already exist ! Try one more time, please!\");\r\n  //     return;\r\n  //   }\r\n\r\n  //   setContacts((prevContacts) => [...person, ...prevContacts]);\r\n  // };\r\n\r\n  // const deleteContact = (id) => {\r\n  //   setContacts(contacts.filter((contact) => contact.id !== id));\r\n  // };\r\n\r\n  // const changeFilter = (e) => {\r\n  //   setFilter(e.currentTarget.value);\r\n  // };","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import { myActions } from \"./redux/actions\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport {store, persistor} from \"./redux/store\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// console.log(store.dispatch(myActions));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"contactForm_label__FJdhC\",\"input\":\"contactForm_input__1sNWL\",\"button\":\"contactForm_button__1Sa7P\"};"],"sourceRoot":""}